name: Check

on:
  workflow_call:
    inputs:
      commit-sha:
        required: false
        type: string
    secrets:
      YC_SA_JSON_CREDENTIALS:
        required: true
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
      YC_VM_USERNAME:
        required: true
      YC_VM_SSH_PUBLIC_KEY:
        required: true


env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:
  start-vm:
    name: Start VM
    runs-on: trampoline
    outputs:
      label: ${{ steps.start-yc-runner.outputs.label }}
      instance-id: ${{ steps.start-yc-runner.outputs.instance-id }}
    steps:
      - name: Start YC runner
        id: start-yc-runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: start
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          folder-id: ${{ vars.YC_FOLDER_ID }}
          image-id: fd8258mpbsko9l5spr8i
          zone-id: ${{ vars.YC_ZONE_ID }}
          subnet-id: ${{ vars.YC_SUBNET_ID }}
          cores: 16
          memory: 32GB
          core-fraction: 100
          disk-type: network-ssd-nonreplicated
          disk-size: 279GB
          user: ${{ secrets.YC_VM_USERNAME }}
          ssh-public-key: ${{ secrets.YC_VM_SSH_PUBLIC_KEY }}
          public-ip: false
          runner-home-dir: /actions-runner
          ttl: PT24H

  checkout:
    name: Checkout sources
    needs: start-vm
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Checkout ytsaurus-cpp-sdk
        uses: actions/checkout@v3

      - name: Checkout PR
        if: ${{ inputs.commit-sha }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.commit-sha }}

  build:
    name: Build
    needs:
      - start-vm
      - checkout
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Stop and remove old container
        run: docker rm -f build-container || true

      - name: Run container
        run: docker run -d --name build-container --network host -v "$(pwd)":/ytsaurus-cpp-sdk ghcr.io/ilyaibraev/ytsaurus-ci:latest tail -f /dev/null

      - name: Build with libc++
        run: |
          docker exec build-container bash -c '
            set -ex
            mkdir -p /build
            cd /build
            rm -rf *
            cmake \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=/ytsaurus-cpp-sdk/clang.toolchain \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=/ytsaurus-cpp-sdk/cmake/conan_provider.cmake \
              -DREQUIRED_LLVM_TOOLING_VERSION=16 \
              -DCMAKE_CXX_FLAGS_INIT="-stdlib=libc++" \
              /ytsaurus-cpp-sdk
            export CCACHE_BASEDIR="/ytsaurus-cpp-sdk"
            export CCACHE_REMOTE_ONLY=true
            export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"
            ninja
          '

      - name: Build with libstdc++
        run: |
          docker exec build-container bash -c '
            set -ex
            mkdir -p /build_gcc
            cd /build_gcc
            rm -rf *
            cmake \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=/ytsaurus-cpp-sdk/clang.toolchain \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=/ytsaurus-cpp-sdk/cmake/conan_provider.cmake \
              -DREQUIRED_LLVM_TOOLING_VERSION=16 \
              -DCMAKE_CXX_FLAGS_INIT="-stdlib=libstdc++ -std=c++20" \
              /ytsaurus-cpp-sdk
            export CCACHE_BASEDIR="/ytsaurus-cpp-sdk"
            export CCACHE_REMOTE_ONLY=true
            export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"
            ninja
          '

  stop-vm:
    name: Stop VM
    needs:
      - start-vm
      - build
    runs-on: trampoline
    if: ${{ always() }}
    steps:
      - name: Stop YC runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: stop
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-vm.outputs.label }}
          instance-id: ${{ needs.start-vm.outputs.instance-id }}
