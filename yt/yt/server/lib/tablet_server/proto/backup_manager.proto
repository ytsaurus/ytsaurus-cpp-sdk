package NYT.NTabletServer.NProto;

import "yt/ytlib/tablet_client/proto/heartbeat.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/misc/proto/error.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqFinishBackup
{
    repeated NYT.NProto.TGuid tablet_ids = 1;
    required NYT.NProto.TGuid transaction_id = 2;
}

message TReqFinishRestore
{
    repeated NYT.NProto.TGuid tablet_ids = 1;
    required NYT.NProto.TGuid transaction_id = 2;
}

message TReqResetBackupMode
{
    required NYT.NProto.TGuid table_id = 1;
}

//! Denotes a position in an ordered tablet between two dynamic stores.
//! The position is uniquely identified by each of |cutoff_row_index|
//! (the first row index after the cutoff) and |next_dynamic_store_id|
//! (the id of the next dynamic store after the cutoff, if present).
//! 
//! Both identifiers are needed since the descriptor may be applied by master
//! when the next dynamic store is either flushed or not. Row index resolves the
//! ambiguity in the former case, next dynamic store id in the latter.
message TRowIndexCutoffDescriptor
{
    required int64 cutoff_row_index = 1;
    optional NYT.NProto.TGuid next_dynamic_store_id = 2;
}

message TDynamicStoreListCutoffDescriptor
{
    repeated NYT.NProto.TGuid dynamic_store_ids_to_keep = 1;
}

message TBackupCutoffDescriptor
{
    oneof descriptor {
        TRowIndexCutoffDescriptor row_index_descriptor = 1;
        TDynamicStoreListCutoffDescriptor dynamic_store_list_descriptor = 2;
    }
}

message TReqReportBackupCheckpointPassed
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    required bool confirmed = 3;
    optional NYT.NProto.TError error = 4;

    //! For ordered tables denotes the position that separates
    //! rows committed before and after the checkpoint timestamp.
    //!
    //! For sorted async replicas denotes which dynamic stores
    //! should be backed up.
    optional TBackupCutoffDescriptor cutoff_descriptor = 5;

    message TReplicaInfo
    {
        required NYT.NProto.TGuid replica_id = 1;
        required NYT.NTabletClient.NProto.TTableReplicaStatistics replica_statistics = 2;
    }

    repeated TReplicaInfo replicas = 6;
}

////////////////////////////////////////////////////////////////////////////////
