package NYT.NChaosClient.NProto;

import "yt_proto/yt/client/chaos_client/proto/replication_card.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqGenerateReplicationCardId
{ }

message TRspGenerateReplicationCardId
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
}

////////////////////////////////////////////////////////////////////////////////

message TReqCreateReplicationCard
{
    optional NYT.NProto.TGuid hint_id = 1; // NChaosClient::TReplicationCardId
    optional NYT.NProto.TGuid table_id = 2; // NTableClient::TTableId
    optional string table_path = 3;
    optional string table_cluster_name = 4;
    optional bytes replicated_table_options = 5; // NTabletClient::TReplicatedTableOptions
    // NB(ponasenko-rs): For testing purposes only.
    optional bool bypass_suspended = 6;
}

message TRspCreateReplicationCard
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
}

////////////////////////////////////////////////////////////////////////////////

message TReqRemoveReplicationCard
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
}

message TRspRemoveReplicationCard
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqGetReplicationCard
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
    optional TReplicationCardFetchOptions fetch_options = 2;
    optional uint64 refresh_era = 3;
}

message TRspGetReplicationCard
{
    required TReplicationCard replication_card = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqFindReplicationCard
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
}

message TRspFindReplicationCard
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqAlterReplicationCard
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
    optional bytes replicated_table_options = 2; // NTabletClient::TReplicatedTableOptions
    optional bool enable_replicated_table_tracker = 3;
    optional NYT.NProto.TGuid replication_card_collocation_id = 4;
}

message TRspAlterReplicationCard
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqCreateTableReplica
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
    required string cluster_name = 2;
    required string replica_path = 3;
    required int32 content_type = 4; // NTabletClient::ETableReplicaContentType
    required int32 mode = 5; // NTabletClient::ETableReplicaMode
    optional bool enabled = 6;
    optional bool catchup = 7 [default = true];
    optional TReplicationProgress replication_progress = 8;
    optional bool enable_replicated_table_tracker = 9;
}

message TRspCreateTableReplica
{
    required NYT.NProto.TGuid replica_id = 1; // NChaosClient::TReplicaId
}

////////////////////////////////////////////////////////////////////////////////

message TReqRemoveTableReplica
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
    required NYT.NProto.TGuid replica_id = 2; // NChaosClient::TReplicaId
}

message TRspRemoveTableReplica
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqAlterTableReplica
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
    required NYT.NProto.TGuid replica_id = 2; // NChaosClient::TReplicaId
    optional int32 mode = 3; // NTabletClient::ETableReplicaMode
    optional bool enabled = 4;
    optional bool enable_replicated_table_tracker = 5;
}

message TRspAlterTableReplica
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqUpdateTableReplicaProgress
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
    required NYT.NProto.TGuid replica_id = 2; // NChaosClient::TReplicaId
    required TReplicationProgress replication_progress = 3;
    optional bool force = 4 [default = false];
}

message TRspUpdateTableReplicaProgress
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqMigrateReplicationCards
{
    required NYT.NProto.TGuid migrate_to_cell_id = 1;
    repeated NYT.NProto.TGuid replication_card_ids = 2;
    optional bool migrate_all_replication_cards = 3;
    optional bool suspend_chaos_cell = 4;
    optional bool require_suspension = 5 [default = false];
}

message TRspMigrateReplicationCards
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqResumeChaosCell
{ }

message TRspResumeChaosCell
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqCreateReplicationCardCollocation
{
    repeated NYT.NProto.TGuid replication_card_ids = 1;
}

message TRspCreateReplicationCardCollocation
{
    required NYT.NProto.TGuid replication_card_collocation_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetReplicationCardCollocation
{
    required NYT.NProto.TGuid replication_card_collocation_id = 1;
}

message TRspGetReplicationCardCollocation
{
    repeated NYT.NProto.TGuid collocation_replication_card_ids = 1;
}

////////////////////////////////////////////////////////////////////////////////
